@model ReadItemViewModel
@{
    Layout = "_AdminLayout";
}

<h3>编辑阅读</h3>
<form novalidate>
    <div class="mb-3">
        <label for="bookName" class="form-label">书籍名称</label>
        <input type="text" class="form-control" id="bookName" name="bookName" placeholder="书籍名称" value="@Model.Item.BookName" autocomplete="off" autofocus required>
        <div class="invalid-feedback">
            必填
        </div>
    </div>
    <div class="mb-3">
        <label for="author" class="form-label">作者</label>
        <input type="text" class="form-control" id="author" name="author" placeholder="作者" value="@Model.Item.Author" autocomplete="off">
    </div>
    <div class="mb-3">
        <label for="authorCountry" class="form-label">作者国籍</label>
        <input type="text" class="form-control" id="authorCountry" name="authorCountry" placeholder="作者国籍" value="@Model.Item.AuthorCountry" autocomplete="off">
    </div>
    <div class="mb-3">
        <label for="translator" class="form-label">译者</label>
        <input type="text" class="form-control" id="translator" name="translator" placeholder="译者" value="@Model.Item.Translator" autocomplete="off">
    </div>
    <div class="mb-3">
        <label for="publisherName" class="form-label">出版社</label>
        <input type="text" class="form-control" id="publisherName" name="publisherName" placeholder="出版社" value="@Model.Item.PublisherName" autocomplete="off">
    </div>
    <div class="mb-3">
        <label for="publishDate" class="form-label">出版时间</label>
        <input type="date" class="form-control" id="publishDate" name="publishDate" value="@Model.Item.PublishDate.ToDate()" autocomplete="off">
    </div>
    <div class="mb-3">
        <label for="createTime" class="form-label">创建时间</label>
        <input type="datetime-local" class="form-control" id="createTime" name="createTime" value="@Model.Item.CreateTime.ToFullDateTime()" autocomplete="off" readonly>
        <div class="invalid-feedback">
            必填
        </div>
    </div>
    <div class="mb-3">
        <label for="posts" class="form-label">文章链接</label>
        <select class="form-select font-monospace" id="posts" name="posts" multiple size="10">
            @if(!Model.Posts.Any())
            {
                <option selected value="" class="small">-- 选择博客文章（支持多选） --</option>
            }
            else
            {
                <option value="" class="small">-- 选择博客文章（支持多选） --</option>
            }

            
            @foreach (var p in Model.Posts)
            {
                if (Model.Item.Posts.Contains(p.Raw.Id))
                {
                    <option value="@p.Raw.Id" selected>@p.Raw.Title</option>
                }
                else
                {
                    <option value="@p.Raw.Id">@p.Raw.Title</option>
                }
            }
        </select>
    </div>
    <div class="mb-3">
        <label for="comment" class="form-label">短评</label>
        <div id="comment"></div>
    </div>
    <div class="mb-3">
        <label for="grade" class="form-label">评分</label>
        <input type="number" class="form-control" id="grade" name="grade" value="1" min="0" max="2" step="1" autocomplete="off" aria-describedby="gradeHelp" value="@Model.Item.Grade">
        <div id="gradeHelp" class="form-text">0：差评；1：一般般；2：好评</div>
    </div>
    <div class="form-check form-switch mb-3">
        @if (Model.Item.IsPublic)
        {
            <input class="form-check-input" type="checkbox" id="isPublic" name="isPublic" checked>
        }
        else
        {
            <input class="form-check-input" type="checkbox" id="isPublic" name="isPublic">
        }
        <label class="form-check-label" for="isPublic">公开发布</label>
    </div>
    <div class="d-grid">
        <button type="submit" class="btn btn-primary btn-lg">提交</button>
    </div>

    <input type="hidden" name="id" value="@Model.Item.Id" />
</form>

@section Script {
    <script>
        let editor = createEditor("#comment", "@Model.Item.Comment");
        const form = document.querySelector("form");
        form.addEventListener('submit',
            function (event) {
                event.preventDefault();
                event.stopPropagation();
                var formData = new FormData(form);
                formData.append("comment", editor.content);
                submitRequest("/@Constants.AreaAdmin/read/edit", { form: form, method: "PUT", body: new URLSearchParams(formData), contentType: "application/x-www-form-urlencoded" });
            });
    </script>
}