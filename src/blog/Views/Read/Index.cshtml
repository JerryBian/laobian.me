@model List<ReadItemViewModel>
@{
    ViewData["Title"] = "我的阅读";
    ViewData["Description"] = "一些我所读过的书。";
}

<div>
    @foreach (var item in Model)
    {
        <h3 class="mb-3" id="@item.Id">@item.Title</h3>
        <div class="list-group mb-5">
            @foreach (var book in item.Items)
            {
                var c = book.Raw.IsPublished ? string.Empty : "list-group-item-danger";
                <div class="list-group-item @c">
                    <div class="d-flex w-100 justify-content-between">
                        <h4 class="mb-1">
                            @book.Raw.BookName
                            @if (book.Raw.Grade == 1)
                            {
                                <i class="text-success fas fa-thumbs-up"></i>
                            }
                            else if (book.Raw.Grade == -1)
                            {
                                <i class="text-danger fas fa-thumbs-down"></i>
                            }
                        </h4>
                        @if (book.Raw.IsCompleted)
                        {
                            <small title="结束于 @book.Raw.EndTime.ToChinaDate()">@book.Raw.StartTime.ToChinaDate()</small>
                        }
                        else
                        {
                            <small class="text-success" title="开始于 @book.Raw.StartTime.ToChinaDate()">正在阅读</small>
                        }
                    </div>

                    @{
                        var info = new List<string>();
                        @if (!string.IsNullOrEmpty(book.Raw.BookName2))
                        {
                            info.Add($"（又名）{book.Raw.BookName2}");
                        }

                        if (!string.IsNullOrEmpty(book.Raw.AuthorName))
                        {
                            var author = book.Raw.AuthorName;
                            if (!string.IsNullOrEmpty(book.Raw.AuthorCountry))
                            {
                                author = $"{author}（{book.Raw.AuthorCountry}）";
                            }

                            info.Add(author);
                        }

                        if (!string.IsNullOrEmpty(book.Raw.Translator))
                        {
                            info.Add($"{book.Raw.Translator}（译）");
                        }

                        if (!string.IsNullOrEmpty(book.Raw.PublisherName))
                        {
                            var publisher = book.Raw.PublisherName;
                            info.Add(publisher);
                        }

                        if (book.Raw.PublishTime != default)
                        {
                            info.Add(book.Raw.PublishTime.ToDate());
                        }

                        <small class="small text-muted d-block mb-3">@string.Join(" / ", info)</small>
                    }

                    @if (!string.IsNullOrEmpty(book.ShortCommentHtml))
                    {
                        <div class="my-3 alert bg-light small font-monospace">@Html.Raw(book.ShortCommentHtml)</div>
                    }

                    @if (!string.IsNullOrEmpty(book.Raw.BlogPostLink))
                    {
                        <div class="my-3 alert bg-light small font-monospace">
                            博客链接：
                            <i class="text-primary fas fa-link small"></i>
                            <a href="@book.Raw.BlogPostLink">@book.BlogPostTitle</a>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@section Aside{
    <div class="list-group" id="aside_read_items">
        @foreach (var item in Model)
        {
            <a class="list-group-item list-group-item-action" href="#@item.Id">@item.Title (@item.Items.Count)</a>
        }

    </div>
}

@section script{
    <script>
        document.addEventListener("DOMContentLoaded",
            function() {
                anchors.options = {
                    placement: 'right',
                    visible: 'hover',
                    base: '/read'
                };
                anchors.add('h3');
                setScrollspy("#aside_read_items");
                activeNavItem('#nav_read');
            });
    </script>
}